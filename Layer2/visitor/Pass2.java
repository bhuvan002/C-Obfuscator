//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import helper.*;
/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Pass2<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   GlobalSymTab g;

   public Pass2(GlobalSymTab g)
   {
      super();
      this.g = g;
   }

   public void print(String s) {
      System.out.print(s);
   }

   public R visit(NodeList n, A argu) {
      String _ret="";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         _ret += " " + e.nextElement().accept(this,argu);
         _count++;
      }
      return (R)_ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         String _ret="";
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            _ret += " " + e.nextElement().accept(this,argu);
            _count++;
         }
         return (R)_ret;
      }
      else
         return (R)"";
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return (R)"";
   }

   public R visit(NodeSequence n, A argu) {
      String _ret="";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         _ret += " " + e.nextElement().accept(this,argu);
         _count++;
      }
      return (R)_ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( VariablesAndFunctions() )*
    * f1 -> PMain()
    * f2 -> ( VariablesAndFunctions() )*
    * f3 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      String _ret="";
      int i;
      for(i=0;i<g.structs_declared.size();i++)
      {
        _ret += " " + g.structs_declared.get(i);
      }
      for(i=0;i<g.enums_declared.size();i++)
      {
        _ret += " " + g.enums_declared.get(i);
      }
      _ret += " " + n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      _ret += " " + n.f2.accept(this, argu).toString();
      _ret += " " + n.f3.accept(this, argu).toString();

      print(_ret+"\n");

      return (R)_ret;
   }

   /**
    * f0 -> DeclarationStmt()
    *       | FunctionDeclaration()
    *       | StructDeclaration()
    *       | EnumDeclaration()
    *       | FunctionDefinition()
    *       | TypeDef()
    */
   public R visit(VariablesAndFunctions n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> BaseType()
    * f1 -> ObjectList()
    * f2 -> ";"
    */
   public R visit(DeclarationStmt n, A argu) {
      String _ret="";
      // _ret = n.f0.accept(this, argu).toString();
      // _ret += " " + n.f1.accept(this, argu).toString() + ";";
      return (R)_ret;
   }

   /**
    * f0 -> TypeSpecifier()
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> [ ArgList() ]
    * f4 -> ")"
    * f5 -> Block()
    */
   public R visit(FunctionDefinition n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      String func_name = n.f1.accept(this, argu).toString();
      _ret += " " + func_name + "(";
      n.f2.accept(this, argu);
      _ret += " " + n.f3.accept(this, argu).toString() + ")";
      n.f4.accept(this, argu);
      _ret += " " + n.f5.accept(this, (A)func_name).toString();
      return (R)_ret;
   }

   /**
    * f0 -> TypeSpecifier()
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> [ ParameterList() ]
    * f4 -> ")"
    * f5 -> ";"
    */
   public R visit(FunctionDeclaration n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString() + "(";
      n.f2.accept(this, argu);
      _ret += " " + n.f3.accept(this, argu).toString() + ");";
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return (R)_ret;
   }

   /**
    * f0 -> ParameterDeclaration()
    * f1 -> ( "," ParameterDeclaration() )*
    */
   public R visit(ParameterList n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> Type()
    * f1 -> [ Identifier() ]
    */
   public R visit(ParameterDeclaration n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <STRUCT>
    * f1 -> [ Identifier() ]
    * f2 -> "{"
    * f3 -> ( DeclarationStmt() )*
    * f4 -> "}"
    * f5 -> ";"
    */
   public R visit(StructDeclaration n, A argu) {
      String _ret="";
      // _ret = n.f0.accept(this, argu).toString();
      // _ret += " " + n.f1.accept(this, argu) + "{";
      // n.f2.accept(this, argu);
      // _ret += " " + n.f3.accept(this, argu).toString() + "}";;
      // n.f4.accept(this, argu);
      // n.f5.accept(this, argu);
      return (R)_ret;
   }

   /**
    * f0 -> <TYPEDEF>
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> ";"
    */
   public R visit(TypeDef n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      _ret += " " + n.f2.accept(this, argu).toString() + ";"; 
      n.f3.accept(this, argu);
      return (R)_ret;
   }

   /**
    * f0 -> <ENUM>
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> Identifier()
    * f4 -> ( "," Identifier() )*
    * f5 -> "}"
    * f6 -> ";"
    */
   public R visit(EnumDeclaration n, A argu) {
      String _ret="";
      // _ret = n.f0.accept(this, argu).toString();
      // _ret += " " + n.f1.accept(this, argu).toString() + "{";
      // n.f2.accept(this, argu);
      // _ret += " " + n.f3.accept(this, argu).toString();
      // _ret += " " + n.f4.accept(this, argu).toString() + "};";
      // n.f5.accept(this, argu);
      // n.f6.accept(this, argu);
      return (R)_ret;
   }

   /**
    * f0 -> MainReturnType()
    * f1 -> <MAIN>
    * f2 -> "("
    * f3 -> [ <INT> Identifier() "," <CHAR> "*" [ "*" ] Identifier() [ "[" "]" ] ]
    * f4 -> ")"
    * f5 -> Block()
    */
   public R visit(PMain n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      String func_name = n.f1.accept(this, argu).toString();
      _ret += " " + func_name + "(";
      n.f2.accept(this, argu);
      _ret += " " + n.f3.accept(this, argu).toString() + ")";
      n.f4.accept(this, argu);
      _ret += " " + n.f5.accept(this, (A)func_name).toString();
      return (R)_ret;
   }

   /**
    * f0 -> BaseType()
    * f1 -> ( "*" )*
    */
   public R visit(Type n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret +=  " " + n.f1.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> [ StorageClass() ]
    * f1 -> TypeSpecifier()
    */
   public R visit(BaseType n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <STATIC>
    */
   public R visit(StorageClass n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <INT>
    *       | <VOID>
    *       | <CHAR>
    *       | <SHORT>
    *       | <LONG>
    *       | <FLOAT>
    *       | <DOUBLE>
    *       | <SIGNED>
    *       | <UNSIGNED>
    *       | Identifier()
    *       | <STRUCT> [ Identifier() ] [ "{" ( DeclarationStmt() )* "}" ]
    *       | <ENUM> [ Identifier() ] "{" Identifier() ( "," Identifier() )* "}"
    */
   public R visit(TypeSpecifier n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> Arg()
    * f1 -> ( "," Arg() )*
    */
   public R visit(ArgList n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> Type()
    * f1 -> [ Identifier() ]
    */
   public R visit(Arg n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <INT>
    *       | <VOID>
    */
   public R visit(MainReturnType n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> ObjectType()
    * f1 -> ( "," ObjectType() )*
    */
   public R visit(ObjectList n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> ( "*" )*
    * f1 -> Identifier()
    * f2 -> ( "[" Expression() "]" )*
    * f3 -> [ "=" Expression() ]
    */
   public R visit(ObjectType n, A argu) {
      String _ret="";

      // receives base type as string in argu
      // identifier serves as variable name
      // need to maintain original order in the declaration and assignments

      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      _ret += " " + n.f2.accept(this, argu).toString();
      _ret += " " + n.f3.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> "{"
    * f1 -> StatementList()
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      String _ret="";
      n.f0.accept(this, argu);

      if(argu!=null)
      {
        FuncSymTab f = g.get_function(argu.toString());
        int i,j;
        _ret = "{";
        for(i=0;i<f.structs_declared.size();i++)
        {
          _ret += " " + f.structs_declared.get(i);
        }
        for(i=0;i<f.enums_declared.size();i++)
        {
          _ret += " " + f.enums_declared.get(i);
        }
        Variable v;
        for(i=0;i<f.decl_order.size();i++)
        {
          // System.out.println(f.decl_order.get(i));
          v = f.get_variable(f.decl_order.get(i));
          _ret += " " + v.type + " ";
          for(j=0;j<v.pointer_level;j++)
          {
            _ret += "*";
          }
          _ret += v.name;
          for(j=0;j<v.array_level;j++)
          {
            _ret += "[";
            _ret += v.dimexpr.get(j);
            _ret += "]";
          }
          _ret +=";";
        }

        for(i=0;i<f.decl_order.size();i++)
        {
          v = f.get_variable(f.decl_order.get(i));
          if(v.rhs!=null){
            _ret += " " + v.name + "=" + v.rhs;
            _ret +=";";
          }
        }

        _ret += " " + n.f1.accept(this, argu).toString() + "}";
      }
      else
        _ret = "{" + n.f1.accept(this, argu).toString() + "}";
      n.f2.accept(this, argu);
      return (R)_ret;
   }

   /**
    * f0 -> ( [ Label() ] Statement() )*
    */
   public R visit(StatementList n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> ForLoop()
    *       | WhileLoop()
    *       | DoWhile()
    *       | Block()
    *       | IfStmt()
    *       | SwitchStmt()
    *       | BreakStmt()
    *       | ContinueStmt()
    *       | ReturnStmt()
    *       | DeclarationStmt()
    *       | Expression() ";"
    *       | GotoStmt()
    *       | ";"
    */
   public R visit(Statement n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <GOTO>
    * f1 -> Label()
    * f2 -> ";"
    */
   public R visit(GotoStmt n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString() + ";";
      n.f2.accept(this, argu);
      return (R)_ret;
   }

   /**
    * f0 -> <FOR>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ";"
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ")"
    * f8 -> Statement()
    */
   public R visit(ForLoop n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      _ret += " " + n.f2.accept(this, argu).toString();
      _ret += " " + n.f3.accept(this, argu).toString();
      _ret += " " + n.f4.accept(this, argu).toString();
      _ret += " " + n.f5.accept(this, argu).toString();
      _ret += " " + n.f6.accept(this, argu).toString();
      _ret += " " + n.f7.accept(this, argu).toString();
      _ret += " " + n.f8.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <WHILE>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileLoop n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      _ret += " " + n.f2.accept(this, argu).toString();
      _ret += " " + n.f3.accept(this, argu).toString();
      _ret += " " + n.f4.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <DO>
    * f1 -> Statement()
    * f2 -> <WHILE>
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoWhile n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      _ret += " " + n.f2.accept(this, argu).toString();
      _ret += " " + n.f3.accept(this, argu).toString();
      _ret += " " + n.f4.accept(this, argu).toString();
      _ret += " " + n.f5.accept(this, argu).toString();
      _ret += " " + n.f6.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <BREAK>
    * f1 -> ";"
    */
   public R visit(BreakStmt n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <CONTINUE>
    * f1 -> ";"
    */
   public R visit(ContinueStmt n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <RETURN>
    * f1 -> [ Expression() ]
    * f2 -> ";"
    */
   public R visit(ReturnStmt n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString() + ";";
      n.f2.accept(this, argu);
      return (R)_ret;
   }

   /**
    * f0 -> IfThenElseStmt()
    *       | IfThenStmt()
    */
   public R visit(IfStmt n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfThenStmt n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      _ret += " " + n.f2.accept(this, argu).toString();
      _ret += " " + n.f3.accept(this, argu).toString();
      _ret += " " + n.f4.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <IF>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> <ELSE>
    * f6 -> Statement()
    */
   public R visit(IfThenElseStmt n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      _ret += " " + n.f2.accept(this, argu).toString();
      _ret += " " + n.f3.accept(this, argu).toString();
      _ret += " " + n.f4.accept(this, argu).toString();
      _ret += " " + n.f5.accept(this, argu).toString();
      _ret += " " + n.f6.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <SWITCH>
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> "{"
    * f5 -> ( CaseStmt() )*
    * f6 -> "}"
    */
   public R visit(SwitchStmt n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      _ret += " " + n.f2.accept(this, argu).toString();
      _ret += " " + n.f3.accept(this, argu).toString();
      _ret += " " + n.f4.accept(this, argu).toString();
      _ret += " " + n.f5.accept(this, argu).toString();
      _ret += " " + n.f6.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <CASE> Expression() ":" ( Statement() )*
    *       | <DFLT> ":" ( Statement() )*
    */
   public R visit(CaseStmt n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ":"
    */
   public R visit(Label n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> Ops()
    * f1 -> PrimaryExpr()
    */
   public R visit(BinOp n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> "||"
    *       | "&&"
    *       | "<"
    *       | "<="
    *       | ">"
    *       | ">="
    *       | "=="
    *       | "!="
    *       | "+"
    *       | "-"
    *       | "*"
    *       | "/"
    *       | "%"
    *       | "&"
    *       | "|"
    *       | "^"
    *       | "<<"
    *       | ">>"
    */
   public R visit(Ops n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> "++"
    *       | "!"
    *       | "--"
    *       | "~"
    *       | "*"
    *       | "&"
    */
   public R visit(LeftUnary n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> "++"
    *       | "--"
    */
   public R visit(RightUnary n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> PrimaryExpr() [ ExpressionContd() ]
    *       | LeftUnary() PrimaryExpr()
    */
   public R visit(Expression n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> RHSAssignExpr()
    *       | "(" [ Expression() ( "," Expression() )* ] ")"
    *       | BinOp()
    *       | RightUnary()
    *       | StructExpr()
    *       | ArrayLookup()
    *       | TernaryExpr()
    */
   public R visit(ExpressionContd n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> "=" Expression()
    *       | "+=" Expression()
    *       | "-=" Expression()
    *       | "*=" Expression()
    *       | "/=" Expression()
    *       | "%=" Expression()
    *       | "<<=" Expression()
    *       | ">>=" Expression()
    *       | "&=" Expression()
    *       | "^=" Expression()
    *       | "|=" Expression()
    */
   public R visit(RHSAssignExpr n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> "?"
    * f1 -> Expression()
    * f2 -> ":"
    * f3 -> Expression()
    */
   public R visit(TernaryExpr n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      _ret += " " + n.f2.accept(this, argu).toString();
      _ret += " " + n.f3.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> ( "[" PrimaryExpr() "]" )+
    */
   public R visit(ArrayLookup n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> StructOps()
    * f1 -> Identifier()
    */
   public R visit(StructExpr n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      _ret += " " + n.f1.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> "->"
    *       | "."
    */
   public R visit(StructOps n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> Identifier()
    *       | "(" Expression() ")"
    *       | <INTEGER_LITERAL>
    *       | <FLOATING_POINT_LITERAL>
    *       | <STRING_LITERAL>
    *       | <CHARACTER_LITERAL>
    */
   public R visit(PrimaryExpr n, A argu) {
      String _ret="";
      _ret = n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      String _ret="";
      _ret =n.f0.accept(this, argu).toString();
      return (R)_ret;
   }

}
