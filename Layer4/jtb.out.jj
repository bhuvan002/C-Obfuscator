//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(CParser)
import syntaxtree.*;
import java.util.Vector;


public class CParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(CParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | <"//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <"/*" (~["*"])* "*" ("*" | ~["*", "/"] (~["*"])* "*")* "/">
   | "#" : PREPROCESSOR_OUTPUT
}

<PREPROCESSOR_OUTPUT> SKIP :
{
   "\n" : DEFAULT
}

<PREPROCESSOR_OUTPUT> MORE :
{
   "\\\n"
   | "\\\r\n"
   | <~[]>
}

TOKEN :
{
   <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l", "L"])? | <HEX_LITERAL> (["l", "L"])? | <OCTAL_LITERAL> (["l", "L"])?>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <CHARACTER_LITERAL: "\'" (~["\'", "\\", "\n", "\r"] | "\\" (["n", "t", "b", "r", "f", "\\", "\'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
   | <STRING_LITERAL: "\"" (~["\"", "\\", "\n", "\r"] | "\\" (["n", "t", "b", "r", "f", "\\", "\'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"] | (["\n", "\r"] | "\r\n")))* "\"">
}

TOKEN :
{
   <CONTINUE: "continue">
   | <VOLATILE: "volatile">
   | <REGISTER: "register">
   | <UNSIGNED: "unsigned">
   | <TYPEDEF: "typedef">
   | <DFLT: "default">
   | <DOUBLE: "double">
   | <SWITCH: "switch">
   | <RETURN: "return">
   | <EXTERN: "extern">
   | <STRUCT: "struct">
   | <STATIC: "static">
   | <SIGNED: "signed">
   | <WHILE: "while">
   | <BREAK: "break">
   | <UNION: "union">
   | <CONST: "const">
   | <FLOAT: "float">
   | <SHORT: "short">
   | <ELSE: "else">
   | <CASE: "case">
   | <LONG: "long">
   | <ENUM: "enum">
   | <AUTO: "auto">
   | <VOID: "void">
   | <CHAR: "char">
   | <GOTO: "goto">
   | <FOR: "for">
   | <INT: "int">
   | <IF: "if">
   | <DO: "do">
   | <MAIN: "main">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z"]>
   | <#DIGIT: ["0"-"9"]>
}

Goal Goal() :
{
   NodeListOptional n0 = new NodeListOptional();
   VariablesAndFunctions n1;
   PMain n2;
   NodeListOptional n3 = new NodeListOptional();
   VariablesAndFunctions n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      LOOKAHEAD(2)
      n1=VariablesAndFunctions()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n2=PMain()
   (
      n4=VariablesAndFunctions()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n6=<EOF> { 
      n6.beginColumn++; n6.endColumn++;
      n5 = JTBToolkit.makeNodeToken(n6);
   }
   
   { return new Goal(n0,n2,n3,n5); }
}

VariablesAndFunctions VariablesAndFunctions() :
{
   NodeChoice n0;
   DeclarationStmt n1;
   FunctionDeclaration n2;
   StructDeclaration n3;
   EnumDeclaration n4;
   FunctionDefinition n5;
   TypeDef n6;

   
}
{
   (
      LOOKAHEAD(DeclarationStmt())
      n1=DeclarationStmt()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(FunctionDeclaration())
      n2=FunctionDeclaration()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(StructDeclaration())
      n3=StructDeclaration()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(EnumDeclaration())
      n4=EnumDeclaration()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=FunctionDefinition()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=TypeDef()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new VariablesAndFunctions(n0); }
}

DeclarationStmt DeclarationStmt() :
{
   BaseType n0;
   ObjectList n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=BaseType()
   n1=ObjectList()
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new DeclarationStmt(n0,n1,n2); }
}

FunctionDefinition FunctionDefinition() :
{
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   ArgList n5;
   NodeToken n6;
   Token n7;
   SimpleBlock n8;

   
}
{
   n0=Type()
   n1=Identifier()
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=ArgList()
      { n4.addNode(n5); }
   )?
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=SimpleBlock()
   
   { return new FunctionDefinition(n0,n1,n2,n4,n6,n8); }
}

SimpleBlock SimpleBlock() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   DeclarationStmt n3;
   NodeListOptional n4 = new NodeListOptional();
   StatementUnit n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(DeclarationStmt())
      n3=DeclarationStmt()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   (
      n5=StatementUnit()
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n7="}" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new SimpleBlock(n0,n2,n4,n6); }
}

StatementUnit StatementUnit() :
{
   Label n0;
   Statement n1;
   GotoStmt n2;

   
}
{
   n0=Label()
   n1=Statement()
   n2=GotoStmt()
   
   { return new StatementUnit(n0,n1,n2); }
}

FunctionDeclaration FunctionDeclaration() :
{
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   ParameterList n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   
}
{
   n0=Type()
   n1=Identifier()
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=ParameterList()
      { n4.addNode(n5); }
   )?
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=";" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new FunctionDeclaration(n0,n1,n2,n4,n6,n8); }
}

ParameterList ParameterList() :
{
   ParameterDeclaration n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ParameterDeclaration n5;

   
}
{
   n0=ParameterDeclaration()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ParameterDeclaration()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ParameterList(n0,n1); }
}

ParameterDeclaration ParameterDeclaration() :
{
   Type n0;
   NodeOptional n1 = new NodeOptional();
   Identifier n2;

   
}
{
   n0=Type()
   (
      n2=Identifier()
      { n1.addNode(n2); }
   )?
   
   { return new ParameterDeclaration(n0,n1); }
}

StructDeclaration StructDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   DeclarationStmt n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1=<STRUCT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Identifier()
      { n2.addNode(n3); }
   )?
   n5="{" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=DeclarationStmt()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   n9="}" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new StructDeclaration(n0,n2,n4,n6,n8,n10); }
}

TypeDef TypeDef() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<TYPEDEF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n3=Identifier()
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new TypeDef(n0,n2,n3,n4); }
}

EnumDeclaration EnumDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Identifier n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;

   
}
{
   n1=<ENUM> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Identifier()
   (
      { n7 = new NodeSequence(2); }
      n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=Identifier()
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   n12="}" { n11 = JTBToolkit.makeNodeToken(n12); }
   n14=";" { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new EnumDeclaration(n0,n2,n3,n5,n6,n11,n13); }
}

PMain PMain() :
{
   MainReturnType n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16;
   NodeToken n17;
   Token n18;
   Identifier n19;
   NodeOptional n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   SimpleBlock n28;

   
}
{
   n0=MainReturnType()
   n2=<MAIN> { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      { n16 = new NodeOptional(); }
      { n20 = new NodeOptional(); }
      { n6 = new NodeSequence(8); }
      n8=<INT> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=Identifier()
      { n6.addNode(n9); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n6.addNode(n10); }
      n13=<CHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n6.addNode(n12); }
      n15="*" { n14 = JTBToolkit.makeNodeToken(n15); }
      { n6.addNode(n14); }
      (
         n18="*" { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
      )?
      { n6.addNode(n16); }
      n19=Identifier()
      { n6.addNode(n19); }
      (
         { n21 = new NodeSequence(2); }
         n23="[" { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21.addNode(n22); }
         n25="]" { n24 = JTBToolkit.makeNodeToken(n25); }
         { n21.addNode(n24); }
         { n20.addNode(n21); }
      )?
      { n6.addNode(n20); }
      { n5.addNode(n6); }
   )?
   n27=")" { n26 = JTBToolkit.makeNodeToken(n27); }
   n28=SimpleBlock()
   
   { return new PMain(n0,n1,n3,n5,n26,n28); }
}

Type Type() :
{
   BaseType n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeToken n2;
   Token n3;

   
}
{
   n0=BaseType()
   (
      n3="*" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Type(n0,n1); }
}

BaseType BaseType() :
{
   NodeOptional n0 = new NodeOptional();
   StorageClass n1;
   TypeSpecifier n2;

   
}
{
   (
      n1=StorageClass()
      { n0.addNode(n1); }
   )?
   n2=TypeSpecifier()
   
   { return new BaseType(n0,n2); }
}

StorageClass StorageClass() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<STATIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new StorageClass(n0); }
}

TypeSpecifier TypeSpecifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   Identifier n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeOptional n23 = new NodeOptional();
   Identifier n24;
   NodeOptional n25 = new NodeOptional();
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   NodeListOptional n29;
   DeclarationStmt n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36 = new NodeOptional();
   Identifier n37;
   NodeToken n38;
   Token n39;
   Identifier n40;
   NodeListOptional n41 = new NodeListOptional();
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   Identifier n45;
   NodeToken n46;
   Token n47;

   
}
{
   (
      n2=<INT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<VOID> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<CHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<SHORT> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<LONG> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<FLOAT> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<DOUBLE> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<SIGNED> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<UNSIGNED> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n19=Identifier()
      { n0 = new NodeChoice(n19, 9); }
   |
      { n20 = new NodeSequence(3); }
      n22=<STRUCT> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
      (
         LOOKAHEAD(Identifier())
         n24=Identifier()
         { n23.addNode(n24); }
      )?
      { n20.addNode(n23); }
      (
         { n29 = new NodeListOptional(); }
         { n26 = new NodeSequence(3); }
         n28="{" { n27 = JTBToolkit.makeNodeToken(n28); }
         { n26.addNode(n27); }
         (
            n30=DeclarationStmt()
            { n29.addNode(n30); }
         )*
         { n29.nodes.trimToSize(); }
         { n26.addNode(n29); }
         n32="}" { n31 = JTBToolkit.makeNodeToken(n32); }
         { n26.addNode(n31); }
         { n25.addNode(n26); }
      )?
      { n20.addNode(n25); }
      { n0 = new NodeChoice(n20, 10); }
   |
      { n33 = new NodeSequence(6); }
      n35=<ENUM> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n33.addNode(n34); }
      (
         n37=Identifier()
         { n36.addNode(n37); }
      )?
      { n33.addNode(n36); }
      n39="{" { n38 = JTBToolkit.makeNodeToken(n39); }
      { n33.addNode(n38); }
      n40=Identifier()
      { n33.addNode(n40); }
      (
         { n42 = new NodeSequence(2); }
         n44="," { n43 = JTBToolkit.makeNodeToken(n44); }
         { n42.addNode(n43); }
         n45=Identifier()
         { n42.addNode(n45); }
         { n41.addNode(n42); }
      )*
      { n41.nodes.trimToSize(); }
      { n33.addNode(n41); }
      n47="}" { n46 = JTBToolkit.makeNodeToken(n47); }
      { n33.addNode(n46); }
      { n0 = new NodeChoice(n33, 11); }
   )
   
   { return new TypeSpecifier(n0); }
}

ArgList ArgList() :
{
   Arg n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Arg n5;

   
}
{
   n0=Arg()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Arg()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ArgList(n0,n1); }
}

Arg Arg() :
{
   Type n0;
   NodeOptional n1 = new NodeOptional();
   Identifier n2;

   
}
{
   n0=Type()
   (
      n2=Identifier()
      { n1.addNode(n2); }
   )?
   
   { return new Arg(n0,n1); }
}

MainReturnType MainReturnType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<INT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<VOID> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new MainReturnType(n0); }
}

ObjectList ObjectList() :
{
   ObjectType n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ObjectType n5;

   
}
{
   n0=ObjectType()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ObjectType()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ObjectList(n0,n1); }
}

ObjectType ObjectType() :
{
   NodeListOptional n0 = new NodeListOptional();
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Expression n15;

   
}
{
   (
      n2="*" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n3=Identifier()
   (
      { n5 = new NodeSequence(3); }
      n7="[" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=Expression()
      { n5.addNode(n8); }
      n10="]" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n5.addNode(n9); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   (
      { n12 = new NodeSequence(2); }
      n14="=" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=Expression()
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   
   { return new ObjectType(n0,n3,n4,n11); }
}

Block Block() :
{
   NodeToken n0;
   Token n1;
   StatementList n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=StatementList()
   n4="}" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new Block(n0,n2,n3); }
}

StatementList StatementList() :
{
   NodeListOptional n0 = new NodeListOptional();
   NodeSequence n1;
   NodeOptional n2;
   Label n3;
   Statement n4;

   
}
{
   (
      { n2 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      (
         LOOKAHEAD(2)
         n3=Label()
         { n2.addNode(n3); }
      )?
      { n1.addNode(n2); }
      n4=Statement()
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new StatementList(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   ForLoop n1;
   WhileLoop n2;
   DoWhile n3;
   Block n4;
   IfStmt n5;
   SwitchStmt n6;
   BreakStmt n7;
   ContinueStmt n8;
   ReturnStmt n9;
   DeclarationStmt n10;
   NodeSequence n11;
   Expression n12;
   NodeToken n13;
   Token n14;
   GotoStmt n15;
   NodeToken n16;
   Token n17;

   
}
{
   (
      n1=ForLoop()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=WhileLoop()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=DoWhile()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Block()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=IfStmt()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=SwitchStmt()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=BreakStmt()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=ContinueStmt()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=ReturnStmt()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(DeclarationStmt())
      n10=DeclarationStmt()
      { n0 = new NodeChoice(n10, 9); }
   |
      { n11 = new NodeSequence(2); }
      n12=Expression()
      { n11.addNode(n12); }
      n14=";" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n11.addNode(n13); }
      { n0 = new NodeChoice(n11, 10); }
   |
      n15=GotoStmt()
      { n0 = new NodeChoice(n15, 11); }
   |
      n17=";" { n16 = JTBToolkit.makeNodeToken(n17); }
      { n0 = new NodeChoice(n16, 12); }
   )
   
   { return new Statement(n0); }
}

GotoStmt GotoStmt() :
{
   NodeToken n0;
   Token n1;
   Label n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1=<GOTO> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Label()
   n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new GotoStmt(n0,n2,n3); }
}

ForLoop ForLoop() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   Expression n10;
   NodeToken n11;
   Token n12;
   Statement n13;

   
}
{
   n1=<FOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=";" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Expression()
   n9=";" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Expression()
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=Statement()
   
   { return new ForLoop(n0,n2,n4,n5,n7,n8,n10,n11,n13); }
}

WhileLoop WhileLoop() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1=<WHILE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new WhileLoop(n0,n2,n4,n5,n7); }
}

DoWhile DoWhile() :
{
   NodeToken n0;
   Token n1;
   Statement n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1=<DO> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Statement()
   n4=<WHILE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Expression()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new DoWhile(n0,n2,n3,n5,n7,n8,n10); }
}

BreakStmt BreakStmt() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<BREAK> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new BreakStmt(n0,n2); }
}

ContinueStmt ContinueStmt() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<CONTINUE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ContinueStmt(n0,n2); }
}

ReturnStmt ReturnStmt() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<RETURN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Expression()
      { n2.addNode(n3); }
   )?
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ReturnStmt(n0,n2,n4); }
}

IfStmt IfStmt() :
{
   NodeChoice n0;
   IfThenElseStmt n1;
   IfThenStmt n2;

   
}
{
   (
      LOOKAHEAD(IfThenElseStmt())
      n1=IfThenElseStmt()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=IfThenStmt()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new IfStmt(n0); }
}

IfThenStmt IfThenStmt() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new IfThenStmt(n0,n2,n4,n5,n7); }
}

IfThenElseStmt IfThenElseStmt() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeToken n8;
   Token n9;
   Statement n10;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   n9=<ELSE> { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Statement()
   
   { return new IfThenElseStmt(n0,n2,n4,n5,n7,n8,n10); }
}

SwitchStmt SwitchStmt() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   CaseStmt n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1=<SWITCH> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="{" { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=CaseStmt()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n12="}" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new SwitchStmt(n0,n2,n4,n5,n7,n9,n11); }
}

CaseStmt CaseStmt() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   Statement n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeListOptional n14 = new NodeListOptional();
   Statement n15;

   
}
{
   (
      { n1 = new NodeSequence(4); }
      n3=<CASE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Expression()
      { n1.addNode(n4); }
      n6=":" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      (
         n8=Statement()
         { n7.addNode(n8); }
      )*
      { n7.nodes.trimToSize(); }
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n9 = new NodeSequence(3); }
      n11=<DFLT> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n13=":" { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9.addNode(n12); }
      (
         n15=Statement()
         { n14.addNode(n15); }
      )*
      { n14.nodes.trimToSize(); }
      { n9.addNode(n14); }
      { n0 = new NodeChoice(n9, 1); }
   )
   
   { return new CaseStmt(n0); }
}

Label Label() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=Identifier()
   n2=":" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new Label(n0,n1); }
}

BinOp BinOp() :
{
   Ops n0;
   PrimaryExpr n1;

   
}
{
   n0=Ops()
   n1=PrimaryExpr()
   
   { return new BinOp(n0,n1); }
}

Ops Ops() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;

   
}
{
   (
      n2="||" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="&&" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="<" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="<=" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=">" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=">=" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="==" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="!=" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18="+" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20="-" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22="*" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24="/" { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26="%" { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   |
      n28="&" { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13); }
   |
      n30="|" { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14); }
   |
      n32="^" { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15); }
   |
      n34="<<" { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16); }
   |
      n36=">>" { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17); }
   )
   
   { return new Ops(n0); }
}

LeftUnary LeftUnary() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   Type n20;
   NodeToken n21;
   Token n22;

   
}
{
   (
      n2="++" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="!" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="--" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="-" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="+" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="~" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="*" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="&" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      { n17 = new NodeSequence(3); }
      n19="(" { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n20=Type()
      { n17.addNode(n20); }
      n22=")" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n17.addNode(n21); }
      { n0 = new NodeChoice(n17, 8); }
   )
   
   { return new LeftUnary(n0); }
}

RightUnary RightUnary() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2="++" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="--" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new RightUnary(n0); }
}

Expression Expression() :
{
   NodeChoice n0;
   NodeSequence n1;
   PrimaryExpr n2;
   NodeOptional n3 = new NodeOptional();
   ExpressionContd n4;
   NodeSequence n5;
   LeftUnary n6;
   PrimaryExpr n7;

   
}
{
   (
      LOOKAHEAD(PrimaryExpr())
      { n1 = new NodeSequence(3); }
      n2=PrimaryExpr()
      { n1.addNode(n2); }
      (
         n4=ExpressionContd()
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(2); }
      n6=LeftUnary()
      { n5.addNode(n6); }
      n7=PrimaryExpr()
      { n5.addNode(n7); }
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new Expression(n0); }
}

ExpressionContd ExpressionContd() :
{
   NodeChoice n0;
   RHSAssignExpr n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   Expression n7;
   NodeListOptional n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Expression n12;
   NodeToken n13;
   Token n14;
   BinOp n15;
   RightUnary n16;
   StructExpr n17;
   ArrayLookup n18;
   TernaryExpr n19;

   
}
{
   (
      n1=RHSAssignExpr()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(3); }
      n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      (
         { n8 = new NodeListOptional(); }
         { n6 = new NodeSequence(2); }
         n7=Expression()
         { n6.addNode(n7); }
         (
            { n9 = new NodeSequence(2); }
            n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
            n12=Expression()
            { n9.addNode(n12); }
            { n8.addNode(n9); }
         )*
         { n8.nodes.trimToSize(); }
         { n6.addNode(n8); }
         { n5.addNode(n6); }
      )?
      { n2.addNode(n5); }
      n14=")" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n2.addNode(n13); }
      { n0 = new NodeChoice(n2, 1); }
   |
      n15=BinOp()
      { n0 = new NodeChoice(n15, 2); }
   |
      n16=RightUnary()
      { n0 = new NodeChoice(n16, 3); }
   |
      n17=StructExpr()
      { n0 = new NodeChoice(n17, 4); }
   |
      n18=ArrayLookup()
      { n0 = new NodeChoice(n18, 5); }
   |
      n19=TernaryExpr()
      { n0 = new NodeChoice(n19, 6); }
   )
   
   { return new ExpressionContd(n0); }
}

RHSAssignExpr RHSAssignExpr() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Expression n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   Expression n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   Expression n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   Expression n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   Expression n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   Expression n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   Expression n36;
   NodeSequence n37;
   NodeToken n38;
   Token n39;
   Expression n40;
   NodeSequence n41;
   NodeToken n42;
   Token n43;
   Expression n44;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n3="=" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Expression()
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(2); }
      n7="+=" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=Expression()
      { n5.addNode(n8); }
      { n0 = new NodeChoice(n5, 1); }
   |
      { n9 = new NodeSequence(2); }
      n11="-=" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=Expression()
      { n9.addNode(n12); }
      { n0 = new NodeChoice(n9, 2); }
   |
      { n13 = new NodeSequence(2); }
      n15="*=" { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      n16=Expression()
      { n13.addNode(n16); }
      { n0 = new NodeChoice(n13, 3); }
   |
      { n17 = new NodeSequence(2); }
      n19="/=" { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n20=Expression()
      { n17.addNode(n20); }
      { n0 = new NodeChoice(n17, 4); }
   |
      { n21 = new NodeSequence(2); }
      n23="%=" { n22 = JTBToolkit.makeNodeToken(n23); }
      { n21.addNode(n22); }
      n24=Expression()
      { n21.addNode(n24); }
      { n0 = new NodeChoice(n21, 5); }
   |
      { n25 = new NodeSequence(2); }
      n27="<<=" { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
      n28=Expression()
      { n25.addNode(n28); }
      { n0 = new NodeChoice(n25, 6); }
   |
      { n29 = new NodeSequence(2); }
      n31=">>=" { n30 = JTBToolkit.makeNodeToken(n31); }
      { n29.addNode(n30); }
      n32=Expression()
      { n29.addNode(n32); }
      { n0 = new NodeChoice(n29, 7); }
   |
      { n33 = new NodeSequence(2); }
      n35="&=" { n34 = JTBToolkit.makeNodeToken(n35); }
      { n33.addNode(n34); }
      n36=Expression()
      { n33.addNode(n36); }
      { n0 = new NodeChoice(n33, 8); }
   |
      { n37 = new NodeSequence(2); }
      n39="^=" { n38 = JTBToolkit.makeNodeToken(n39); }
      { n37.addNode(n38); }
      n40=Expression()
      { n37.addNode(n40); }
      { n0 = new NodeChoice(n37, 9); }
   |
      { n41 = new NodeSequence(2); }
      n43="|=" { n42 = JTBToolkit.makeNodeToken(n43); }
      { n41.addNode(n42); }
      n44=Expression()
      { n41.addNode(n44); }
      { n0 = new NodeChoice(n41, 10); }
   )
   
   { return new RHSAssignExpr(n0); }
}

TernaryExpr TernaryExpr() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   Expression n5;

   
}
{
   n1="?" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Expression()
   
   { return new TernaryExpr(n0,n2,n3,n5); }
}

ArrayLookup ArrayLookup() :
{
   NodeList n0 = new NodeList();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   PrimaryExpr n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=PrimaryExpr()
      { n1.addNode(n4); }
      n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new ArrayLookup(n0); }
}

StructExpr StructExpr() :
{
   StructOps n0;
   Identifier n1;

   
}
{
   n0=StructOps()
   n1=Identifier()
   
   { return new StructExpr(n0,n1); }
}

StructOps StructOps() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2="->" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="." { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new StructOps(n0); }
}

PrimaryExpr PrimaryExpr() :
{
   NodeChoice n0;
   Identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   
}
{
   (
      n1=Identifier()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(3); }
      n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Expression()
      { n2.addNode(n5); }
      n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n0 = new NodeChoice(n2, 1); }
   |
      n9=<INTEGER_LITERAL> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n0 = new NodeChoice(n8, 2); }
   |
      n11=<FLOATING_POINT_LITERAL> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n0 = new NodeChoice(n10, 3); }
   |
      n13=<STRING_LITERAL> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n0 = new NodeChoice(n12, 4); }
   |
      n15=<CHARACTER_LITERAL> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n0 = new NodeChoice(n14, 5); }
   )
   
   { return new PrimaryExpr(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}
