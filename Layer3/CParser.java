/* Generated By:JavaCC: Do not edit this line. CParser.java */
import syntaxtree.*;
import java.util.Vector;


public class CParser implements CParserConstants {

  static final public Goal Goal() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   VariablesAndFunctions n1;
   PMain n2;
   NodeListOptional n3 = new NodeListOptional();
   VariablesAndFunctions n4;
   NodeToken n5;
   Token n6;
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      n1 = VariablesAndFunctions();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
    n2 = PMain();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED:
      case TYPEDEF:
      case DOUBLE:
      case STRUCT:
      case STATIC:
      case SIGNED:
      case FLOAT:
      case SHORT:
      case LONG:
      case ENUM:
      case VOID:
      case CHAR:
      case INT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_2;
      }
      n4 = VariablesAndFunctions();
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    n6 = jj_consume_token(0);
      n6.beginColumn++; n6.endColumn++;
      n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Goal(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public VariablesAndFunctions VariablesAndFunctions() throws ParseException {
   NodeChoice n0;
   DeclarationStmt n1;
   FunctionDeclaration n2;
   StructDeclaration n3;
   EnumDeclaration n4;
   FunctionDefinition n5;
   TypeDef n6;
    if (jj_2_2(2147483647)) {
      n1 = DeclarationStmt();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_3(2147483647)) {
      n2 = FunctionDeclaration();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_4(2147483647)) {
      n3 = StructDeclaration();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_5(2147483647)) {
      n4 = EnumDeclaration();
        n0 = new NodeChoice(n4, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED:
      case DOUBLE:
      case STRUCT:
      case STATIC:
      case SIGNED:
      case FLOAT:
      case SHORT:
      case LONG:
      case ENUM:
      case VOID:
      case CHAR:
      case INT:
      case IDENTIFIER:
        n5 = FunctionDefinition();
        n0 = new NodeChoice(n5, 4);
        break;
      case TYPEDEF:
        n6 = TypeDef();
        n0 = new NodeChoice(n6, 5);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new VariablesAndFunctions(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DeclarationStmt DeclarationStmt() throws ParseException {
   BaseType n0;
   ObjectList n1;
   NodeToken n2;
   Token n3;
    n0 = BaseType();
    n1 = ObjectList();
    n3 = jj_consume_token(55);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new DeclarationStmt(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionDefinition FunctionDefinition() throws ParseException {
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   ArgList n5;
   NodeToken n6;
   Token n7;
   Block n8;
    n0 = Type();
    n1 = Identifier();
    n3 = jj_consume_token(56);
            n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED:
    case DOUBLE:
    case STRUCT:
    case STATIC:
    case SIGNED:
    case FLOAT:
    case SHORT:
    case LONG:
    case ENUM:
    case VOID:
    case CHAR:
    case INT:
    case IDENTIFIER:
      n5 = ArgList();
        n4.addNode(n5);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    n7 = jj_consume_token(57);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Block();
     {if (true) return new FunctionDefinition(n0,n1,n2,n4,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionDeclaration FunctionDeclaration() throws ParseException {
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   ParameterList n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
    n0 = Type();
    n1 = Identifier();
    n3 = jj_consume_token(56);
            n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED:
    case DOUBLE:
    case STRUCT:
    case STATIC:
    case SIGNED:
    case FLOAT:
    case SHORT:
    case LONG:
    case ENUM:
    case VOID:
    case CHAR:
    case INT:
    case IDENTIFIER:
      n5 = ParameterList();
        n4.addNode(n5);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    n7 = jj_consume_token(57);
            n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(55);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new FunctionDeclaration(n0,n1,n2,n4,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public ParameterList ParameterList() throws ParseException {
   ParameterDeclaration n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ParameterDeclaration n5;
    n0 = ParameterDeclaration();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(58);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ParameterDeclaration();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ParameterList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ParameterDeclaration ParameterDeclaration() throws ParseException {
   Type n0;
   NodeOptional n1 = new NodeOptional();
   Identifier n2;
    n0 = Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n2 = Identifier();
        n1.addNode(n2);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
     {if (true) return new ParameterDeclaration(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public StructDeclaration StructDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   DeclarationStmt n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(STRUCT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n3 = Identifier();
        n2.addNode(n3);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    n5 = jj_consume_token(59);
            n4 = JTBToolkit.makeNodeToken(n5);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED:
      case DOUBLE:
      case STRUCT:
      case STATIC:
      case SIGNED:
      case FLOAT:
      case SHORT:
      case LONG:
      case ENUM:
      case VOID:
      case CHAR:
      case INT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      n7 = DeclarationStmt();
        n6.addNode(n7);
    }
     n6.nodes.trimToSize();
    n9 = jj_consume_token(60);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(55);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new StructDeclaration(n0,n2,n4,n6,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeDef TypeDef() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(TYPEDEF);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = Identifier();
    n5 = jj_consume_token(55);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new TypeDef(n0,n2,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public EnumDeclaration EnumDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Identifier n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
    n1 = jj_consume_token(ENUM);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(59);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Identifier();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
        n7 = new NodeSequence(2);
      n9 = jj_consume_token(58);
               n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n10 = Identifier();
        n7.addNode(n10);
        n6.addNode(n7);
    }
     n6.nodes.trimToSize();
    n12 = jj_consume_token(60);
             n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(55);
             n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new EnumDeclaration(n0,n2,n3,n5,n6,n11,n13);}
    throw new Error("Missing return statement in function");
  }

  static final public PMain PMain() throws ParseException {
   MainReturnType n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16;
   NodeToken n17;
   Token n18;
   Identifier n19;
   NodeOptional n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   Block n28;
    n0 = MainReturnType();
    n2 = jj_consume_token(MAIN);
               n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(56);
            n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
        n16 = new NodeOptional();
        n20 = new NodeOptional();
        n6 = new NodeSequence(8);
      n8 = jj_consume_token(INT);
                 n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = Identifier();
        n6.addNode(n9);
      n11 = jj_consume_token(58);
                n10 = JTBToolkit.makeNodeToken(n11);
        n6.addNode(n10);
      n13 = jj_consume_token(CHAR);
                   n12 = JTBToolkit.makeNodeToken(n13);
        n6.addNode(n12);
      n15 = jj_consume_token(61);
                n14 = JTBToolkit.makeNodeToken(n15);
        n6.addNode(n14);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
        n18 = jj_consume_token(61);
                   n17 = JTBToolkit.makeNodeToken(n18);
           n16.addNode(n17);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
        n6.addNode(n16);
      n19 = Identifier();
        n6.addNode(n19);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
           n21 = new NodeSequence(2);
        n23 = jj_consume_token(62);
                   n22 = JTBToolkit.makeNodeToken(n23);
           n21.addNode(n22);
        n25 = jj_consume_token(63);
                   n24 = JTBToolkit.makeNodeToken(n25);
           n21.addNode(n24);
           n20.addNode(n21);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
        n6.addNode(n20);
        n5.addNode(n6);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    n27 = jj_consume_token(57);
             n26 = JTBToolkit.makeNodeToken(n27);
    n28 = Block();
     {if (true) return new PMain(n0,n1,n3,n5,n26,n28);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
   BaseType n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeToken n2;
   Token n3;
    n0 = BaseType();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      n3 = jj_consume_token(61);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Type(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public BaseType BaseType() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   StorageClass n1;
   TypeSpecifier n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      n1 = StorageClass();
        n0.addNode(n1);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    n2 = TypeSpecifier();
     {if (true) return new BaseType(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public StorageClass StorageClass() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STATIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new StorageClass(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeSpecifier TypeSpecifier() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   Identifier n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeOptional n23 = new NodeOptional();
   Identifier n24;
   NodeOptional n25 = new NodeOptional();
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   NodeListOptional n29;
   DeclarationStmt n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36 = new NodeOptional();
   Identifier n37;
   NodeToken n38;
   Token n39;
   Identifier n40;
   NodeListOptional n41 = new NodeListOptional();
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   Identifier n45;
   NodeToken n46;
   Token n47;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      n2 = jj_consume_token(INT);
                 n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case VOID:
      n4 = jj_consume_token(VOID);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case CHAR:
      n6 = jj_consume_token(CHAR);
                  n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case SHORT:
      n8 = jj_consume_token(SHORT);
                   n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case LONG:
      n10 = jj_consume_token(LONG);
                   n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case FLOAT:
      n12 = jj_consume_token(FLOAT);
                    n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case DOUBLE:
      n14 = jj_consume_token(DOUBLE);
                     n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case SIGNED:
      n16 = jj_consume_token(SIGNED);
                     n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case UNSIGNED:
      n18 = jj_consume_token(UNSIGNED);
                       n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case IDENTIFIER:
      n19 = Identifier();
        n0 = new NodeChoice(n19, 9);
      break;
    case STRUCT:
        n20 = new NodeSequence(3);
      n22 = jj_consume_token(STRUCT);
                     n21 = JTBToolkit.makeNodeToken(n22);
        n20.addNode(n21);
      if (jj_2_6(2147483647)) {
        n24 = Identifier();
           n23.addNode(n24);
      } else {
        ;
      }
        n20.addNode(n23);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
           n29 = new NodeListOptional();
           n26 = new NodeSequence(3);
        n28 = jj_consume_token(59);
                   n27 = JTBToolkit.makeNodeToken(n28);
           n26.addNode(n27);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNSIGNED:
          case DOUBLE:
          case STRUCT:
          case STATIC:
          case SIGNED:
          case FLOAT:
          case SHORT:
          case LONG:
          case ENUM:
          case VOID:
          case CHAR:
          case INT:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_7;
          }
          n30 = DeclarationStmt();
              n29.addNode(n30);
        }
           n29.nodes.trimToSize();
           n26.addNode(n29);
        n32 = jj_consume_token(60);
                   n31 = JTBToolkit.makeNodeToken(n32);
           n26.addNode(n31);
           n25.addNode(n26);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
        n20.addNode(n25);
        n0 = new NodeChoice(n20, 10);
      break;
    case ENUM:
        n33 = new NodeSequence(6);
      n35 = jj_consume_token(ENUM);
                   n34 = JTBToolkit.makeNodeToken(n35);
        n33.addNode(n34);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n37 = Identifier();
           n36.addNode(n37);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
        n33.addNode(n36);
      n39 = jj_consume_token(59);
                n38 = JTBToolkit.makeNodeToken(n39);
        n33.addNode(n38);
      n40 = Identifier();
        n33.addNode(n40);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 58:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
           n42 = new NodeSequence(2);
        n44 = jj_consume_token(58);
                   n43 = JTBToolkit.makeNodeToken(n44);
           n42.addNode(n43);
        n45 = Identifier();
           n42.addNode(n45);
           n41.addNode(n42);
      }
        n41.nodes.trimToSize();
        n33.addNode(n41);
      n47 = jj_consume_token(60);
                n46 = JTBToolkit.makeNodeToken(n47);
        n33.addNode(n46);
        n0 = new NodeChoice(n33, 11);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TypeSpecifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ArgList ArgList() throws ParseException {
   Arg n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Arg n5;
    n0 = Arg();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(58);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Arg();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ArgList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Arg Arg() throws ParseException {
   Type n0;
   NodeOptional n1 = new NodeOptional();
   Identifier n2;
    n0 = Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n2 = Identifier();
        n1.addNode(n2);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
     {if (true) return new Arg(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public MainReturnType MainReturnType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      n2 = jj_consume_token(INT);
                 n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case VOID:
      n4 = jj_consume_token(VOID);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new MainReturnType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ObjectList ObjectList() throws ParseException {
   ObjectType n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ObjectType n5;
    n0 = ObjectType();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_10;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(58);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ObjectType();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ObjectList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ObjectType ObjectType() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Expression n15;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_11;
      }
      n2 = jj_consume_token(61);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
    n3 = Identifier();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_12;
      }
        n5 = new NodeSequence(3);
      n7 = jj_consume_token(62);
               n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = Expression();
        n5.addNode(n8);
      n10 = jj_consume_token(63);
                n9 = JTBToolkit.makeNodeToken(n10);
        n5.addNode(n9);
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
        n12 = new NodeSequence(2);
      n14 = jj_consume_token(64);
                n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = Expression();
        n12.addNode(n15);
        n11.addNode(n12);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
     {if (true) return new ObjectType(n0,n3,n4,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public Block Block() throws ParseException {
   NodeToken n0;
   Token n1;
   StatementList n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(59);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = StatementList();
    n4 = jj_consume_token(60);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Block(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public StatementList StatementList() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   NodeSequence n1;
   NodeOptional n2;
   Label n3;
   Statement n4;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case CONTINUE:
      case UNSIGNED:
      case DOUBLE:
      case SWITCH:
      case RETURN:
      case STRUCT:
      case STATIC:
      case SIGNED:
      case WHILE:
      case BREAK:
      case FLOAT:
      case SHORT:
      case LONG:
      case ENUM:
      case VOID:
      case CHAR:
      case GOTO:
      case FOR:
      case INT:
      case IF:
      case DO:
      case IDENTIFIER:
      case 55:
      case 56:
      case 59:
      case 61:
      case 74:
      case 75:
      case 78:
      case 83:
      case 84:
      case 85:
      case 86:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_13;
      }
        n2 = new NodeOptional();
        n1 = new NodeSequence(2);
      if (jj_2_7(2)) {
        n3 = Label();
           n2.addNode(n3);
      } else {
        ;
      }
        n1.addNode(n2);
      n4 = Statement();
        n1.addNode(n4);
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new StatementList(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   NodeChoice n0;
   ForLoop n1;
   WhileLoop n2;
   DoWhile n3;
   Block n4;
   IfStmt n5;
   SwitchStmt n6;
   BreakStmt n7;
   ContinueStmt n8;
   ReturnStmt n9;
   DeclarationStmt n10;
   NodeSequence n11;
   Expression n12;
   NodeToken n13;
   Token n14;
   GotoStmt n15;
   NodeToken n16;
   Token n17;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      n1 = ForLoop();
        n0 = new NodeChoice(n1, 0);
      break;
    case WHILE:
      n2 = WhileLoop();
        n0 = new NodeChoice(n2, 1);
      break;
    case DO:
      n3 = DoWhile();
        n0 = new NodeChoice(n3, 2);
      break;
    case 59:
      n4 = Block();
        n0 = new NodeChoice(n4, 3);
      break;
    case IF:
      n5 = IfStmt();
        n0 = new NodeChoice(n5, 4);
      break;
    case SWITCH:
      n6 = SwitchStmt();
        n0 = new NodeChoice(n6, 5);
      break;
    case BREAK:
      n7 = BreakStmt();
        n0 = new NodeChoice(n7, 6);
      break;
    case CONTINUE:
      n8 = ContinueStmt();
        n0 = new NodeChoice(n8, 7);
      break;
    case RETURN:
      n9 = ReturnStmt();
        n0 = new NodeChoice(n9, 8);
      break;
    default:
      jj_la1[27] = jj_gen;
      if (jj_2_8(2147483647)) {
        n10 = DeclarationStmt();
        n0 = new NodeChoice(n10, 9);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 56:
        case 61:
        case 74:
        case 75:
        case 78:
        case 83:
        case 84:
        case 85:
        case 86:
        n11 = new NodeSequence(2);
          n12 = Expression();
        n11.addNode(n12);
          n14 = jj_consume_token(55);
                n13 = JTBToolkit.makeNodeToken(n14);
        n11.addNode(n13);
        n0 = new NodeChoice(n11, 10);
          break;
        case GOTO:
          n15 = GotoStmt();
        n0 = new NodeChoice(n15, 11);
          break;
        case 55:
          n17 = jj_consume_token(55);
                n16 = JTBToolkit.makeNodeToken(n17);
        n0 = new NodeChoice(n16, 12);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public GotoStmt GotoStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   Label n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(GOTO);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Label();
    n4 = jj_consume_token(55);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new GotoStmt(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public ForLoop ForLoop() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   Expression n10;
   NodeToken n11;
   Token n12;
   Statement n13;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(56);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(55);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Expression();
    n9 = jj_consume_token(55);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Expression();
    n12 = jj_consume_token(57);
             n11 = JTBToolkit.makeNodeToken(n12);
    n13 = Statement();
     {if (true) return new ForLoop(n0,n2,n4,n5,n7,n8,n10,n11,n13);}
    throw new Error("Missing return statement in function");
  }

  static final public WhileLoop WhileLoop() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(56);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(57);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
     {if (true) return new WhileLoop(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public DoWhile DoWhile() throws ParseException {
   NodeToken n0;
   Token n1;
   Statement n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(DO);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Statement();
    n4 = jj_consume_token(WHILE);
                n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(56);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Expression();
    n9 = jj_consume_token(57);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(55);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new DoWhile(n0,n2,n3,n5,n7,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public BreakStmt BreakStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(BREAK);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(55);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new BreakStmt(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ContinueStmt ContinueStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(CONTINUE);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(55);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new ContinueStmt(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnStmt ReturnStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Expression n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(RETURN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 56:
    case 61:
    case 74:
    case 75:
    case 78:
    case 83:
    case 84:
    case 85:
    case 86:
      n3 = Expression();
        n2.addNode(n3);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    n5 = jj_consume_token(55);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ReturnStmt(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public IfStmt IfStmt() throws ParseException {
   NodeChoice n0;
   IfThenElseStmt n1;
   IfThenStmt n2;
    if (jj_2_9(2147483647)) {
      n1 = IfThenElseStmt();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        n2 = IfThenStmt();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new IfStmt(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IfThenStmt IfThenStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(56);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(57);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
     {if (true) return new IfThenStmt(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  static final public IfThenElseStmt IfThenElseStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeToken n8;
   Token n9;
   Statement n10;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(56);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(57);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    n9 = jj_consume_token(ELSE);
               n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Statement();
     {if (true) return new IfThenElseStmt(n0,n2,n4,n5,n7,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchStmt SwitchStmt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   CaseStmt n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(SWITCH);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(56);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(57);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(59);
            n7 = JTBToolkit.makeNodeToken(n8);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DFLT:
      case CASE:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_14;
      }
      n10 = CaseStmt();
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
    n12 = jj_consume_token(60);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new SwitchStmt(n0,n2,n4,n5,n7,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public CaseStmt CaseStmt() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   Statement n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeListOptional n14 = new NodeListOptional();
   Statement n15;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(CASE);
                  n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = Expression();
        n1.addNode(n4);
      n6 = jj_consume_token(65);
               n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case CONTINUE:
        case UNSIGNED:
        case DOUBLE:
        case SWITCH:
        case RETURN:
        case STRUCT:
        case STATIC:
        case SIGNED:
        case WHILE:
        case BREAK:
        case FLOAT:
        case SHORT:
        case LONG:
        case ENUM:
        case VOID:
        case CHAR:
        case GOTO:
        case FOR:
        case INT:
        case IF:
        case DO:
        case IDENTIFIER:
        case 55:
        case 56:
        case 59:
        case 61:
        case 74:
        case 75:
        case 78:
        case 83:
        case 84:
        case 85:
        case 86:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_15;
        }
        n8 = Statement();
           n7.addNode(n8);
      }
        n7.nodes.trimToSize();
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
      break;
    case DFLT:
        n9 = new NodeSequence(3);
      n11 = jj_consume_token(DFLT);
                   n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n13 = jj_consume_token(65);
                n12 = JTBToolkit.makeNodeToken(n13);
        n9.addNode(n12);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case CONTINUE:
        case UNSIGNED:
        case DOUBLE:
        case SWITCH:
        case RETURN:
        case STRUCT:
        case STATIC:
        case SIGNED:
        case WHILE:
        case BREAK:
        case FLOAT:
        case SHORT:
        case LONG:
        case ENUM:
        case VOID:
        case CHAR:
        case GOTO:
        case FOR:
        case INT:
        case IF:
        case DO:
        case IDENTIFIER:
        case 55:
        case 56:
        case 59:
        case 61:
        case 74:
        case 75:
        case 78:
        case 83:
        case 84:
        case 85:
        case 86:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_16;
        }
        n15 = Statement();
           n14.addNode(n15);
      }
        n14.nodes.trimToSize();
        n9.addNode(n14);
        n0 = new NodeChoice(n9, 1);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new CaseStmt(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Label Label() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
    n0 = Identifier();
    n2 = jj_consume_token(65);
            n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new Label(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public BinOp BinOp() throws ParseException {
   Ops n0;
   PrimaryExpr n1;
    n0 = Ops();
    n1 = PrimaryExpr();
     {if (true) return new BinOp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Ops Ops() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
      n2 = jj_consume_token(66);
                n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case 67:
      n4 = jj_consume_token(67);
                n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case 68:
      n6 = jj_consume_token(68);
               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case 69:
      n8 = jj_consume_token(69);
                n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case 70:
      n10 = jj_consume_token(70);
                n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case 71:
      n12 = jj_consume_token(71);
                 n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case 72:
      n14 = jj_consume_token(72);
                 n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case 73:
      n16 = jj_consume_token(73);
                 n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case 74:
      n18 = jj_consume_token(74);
                n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case 75:
      n20 = jj_consume_token(75);
                n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    case 61:
      n22 = jj_consume_token(61);
                n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
      break;
    case 76:
      n24 = jj_consume_token(76);
                n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
      break;
    case 77:
      n26 = jj_consume_token(77);
                n25 = JTBToolkit.makeNodeToken(n26);
        n0 = new NodeChoice(n25, 12);
      break;
    case 78:
      n28 = jj_consume_token(78);
                n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 13);
      break;
    case 79:
      n30 = jj_consume_token(79);
                n29 = JTBToolkit.makeNodeToken(n30);
        n0 = new NodeChoice(n29, 14);
      break;
    case 80:
      n32 = jj_consume_token(80);
                n31 = JTBToolkit.makeNodeToken(n32);
        n0 = new NodeChoice(n31, 15);
      break;
    case 81:
      n34 = jj_consume_token(81);
                 n33 = JTBToolkit.makeNodeToken(n34);
        n0 = new NodeChoice(n33, 16);
      break;
    case 82:
      n36 = jj_consume_token(82);
                 n35 = JTBToolkit.makeNodeToken(n36);
        n0 = new NodeChoice(n35, 17);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Ops(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LeftUnary LeftUnary() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   Type n20;
   NodeToken n21;
   Token n22;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
      n2 = jj_consume_token(83);
                n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case 84:
      n4 = jj_consume_token(84);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case 85:
      n6 = jj_consume_token(85);
                n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case 86:
      n8 = jj_consume_token(86);
               n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case 61:
      n10 = jj_consume_token(61);
                n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case 78:
      n12 = jj_consume_token(78);
                n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case 74:
      n14 = jj_consume_token(74);
                n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case 75:
      n16 = jj_consume_token(75);
                n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case 56:
        n17 = new NodeSequence(3);
      n19 = jj_consume_token(56);
                n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
      n20 = Type();
        n17.addNode(n20);
      n22 = jj_consume_token(57);
                n21 = JTBToolkit.makeNodeToken(n22);
        n17.addNode(n21);
        n0 = new NodeChoice(n17, 8);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new LeftUnary(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public RightUnary RightUnary() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
      n2 = jj_consume_token(83);
                n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case 85:
      n4 = jj_consume_token(85);
                n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new RightUnary(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   PrimaryExpr n2;
   NodeOptional n3 = new NodeOptional();
   ExpressionContd n4;
   NodeSequence n5;
   LeftUnary n6;
   PrimaryExpr n7;
    if (jj_2_10(2147483647)) {
        n1 = new NodeSequence(3);
      n2 = PrimaryExpr();
        n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
      case 61:
      case 62:
      case 64:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 85:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
        n4 = ExpressionContd();
           n3.addNode(n4);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
      case 61:
      case 74:
      case 75:
      case 78:
      case 83:
      case 84:
      case 85:
      case 86:
        n5 = new NodeSequence(2);
        n6 = LeftUnary();
        n5.addNode(n6);
        n7 = PrimaryExpr();
        n5.addNode(n7);
        n0 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Expression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionContd ExpressionContd() throws ParseException {
   NodeChoice n0;
   RHSAssignExpr n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   Expression n7;
   NodeListOptional n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Expression n12;
   NodeToken n13;
   Token n14;
   BinOp n15;
   RightUnary n16;
   StructExpr n17;
   ArrayLookup n18;
   TernaryExpr n19;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
      n1 = RHSAssignExpr();
        n0 = new NodeChoice(n1, 0);
      break;
    case 56:
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(56);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 56:
      case 61:
      case 74:
      case 75:
      case 78:
      case 83:
      case 84:
      case 85:
      case 86:
           n8 = new NodeListOptional();
           n6 = new NodeSequence(2);
        n7 = Expression();
           n6.addNode(n7);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 58:
            ;
            break;
          default:
            jj_la1[40] = jj_gen;
            break label_17;
          }
              n9 = new NodeSequence(2);
          n11 = jj_consume_token(58);
                      n10 = JTBToolkit.makeNodeToken(n11);
              n9.addNode(n10);
          n12 = Expression();
              n9.addNode(n12);
              n8.addNode(n9);
        }
           n8.nodes.trimToSize();
           n6.addNode(n8);
           n5.addNode(n6);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
        n2.addNode(n5);
      n14 = jj_consume_token(57);
                n13 = JTBToolkit.makeNodeToken(n14);
        n2.addNode(n13);
        n0 = new NodeChoice(n2, 1);
      break;
    case 61:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
      n15 = BinOp();
        n0 = new NodeChoice(n15, 2);
      break;
    case 83:
    case 85:
      n16 = RightUnary();
        n0 = new NodeChoice(n16, 3);
      break;
    case 98:
    case 99:
      n17 = StructExpr();
        n0 = new NodeChoice(n17, 4);
      break;
    case 62:
      n18 = ArrayLookup();
        n0 = new NodeChoice(n18, 5);
      break;
    case 97:
      n19 = TernaryExpr();
        n0 = new NodeChoice(n19, 6);
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ExpressionContd(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public RHSAssignExpr RHSAssignExpr() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Expression n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   Expression n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   Expression n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   Expression n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   Expression n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   Expression n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   Expression n36;
   NodeSequence n37;
   NodeToken n38;
   Token n39;
   Expression n40;
   NodeSequence n41;
   NodeToken n42;
   Token n43;
   Expression n44;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
        n1 = new NodeSequence(2);
      n3 = jj_consume_token(64);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = Expression();
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
      break;
    case 87:
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(87);
                n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = Expression();
        n5.addNode(n8);
        n0 = new NodeChoice(n5, 1);
      break;
    case 88:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(88);
                 n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = Expression();
        n9.addNode(n12);
        n0 = new NodeChoice(n9, 2);
      break;
    case 89:
        n13 = new NodeSequence(2);
      n15 = jj_consume_token(89);
                 n14 = JTBToolkit.makeNodeToken(n15);
        n13.addNode(n14);
      n16 = Expression();
        n13.addNode(n16);
        n0 = new NodeChoice(n13, 3);
      break;
    case 90:
        n17 = new NodeSequence(2);
      n19 = jj_consume_token(90);
                 n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
      n20 = Expression();
        n17.addNode(n20);
        n0 = new NodeChoice(n17, 4);
      break;
    case 91:
        n21 = new NodeSequence(2);
      n23 = jj_consume_token(91);
                 n22 = JTBToolkit.makeNodeToken(n23);
        n21.addNode(n22);
      n24 = Expression();
        n21.addNode(n24);
        n0 = new NodeChoice(n21, 5);
      break;
    case 92:
        n25 = new NodeSequence(2);
      n27 = jj_consume_token(92);
                  n26 = JTBToolkit.makeNodeToken(n27);
        n25.addNode(n26);
      n28 = Expression();
        n25.addNode(n28);
        n0 = new NodeChoice(n25, 6);
      break;
    case 93:
        n29 = new NodeSequence(2);
      n31 = jj_consume_token(93);
                  n30 = JTBToolkit.makeNodeToken(n31);
        n29.addNode(n30);
      n32 = Expression();
        n29.addNode(n32);
        n0 = new NodeChoice(n29, 7);
      break;
    case 94:
        n33 = new NodeSequence(2);
      n35 = jj_consume_token(94);
                 n34 = JTBToolkit.makeNodeToken(n35);
        n33.addNode(n34);
      n36 = Expression();
        n33.addNode(n36);
        n0 = new NodeChoice(n33, 8);
      break;
    case 95:
        n37 = new NodeSequence(2);
      n39 = jj_consume_token(95);
                 n38 = JTBToolkit.makeNodeToken(n39);
        n37.addNode(n38);
      n40 = Expression();
        n37.addNode(n40);
        n0 = new NodeChoice(n37, 9);
      break;
    case 96:
        n41 = new NodeSequence(2);
      n43 = jj_consume_token(96);
                 n42 = JTBToolkit.makeNodeToken(n43);
        n41.addNode(n42);
      n44 = Expression();
        n41.addNode(n44);
        n0 = new NodeChoice(n41, 10);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new RHSAssignExpr(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public TernaryExpr TernaryExpr() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   Expression n5;
    n1 = jj_consume_token(97);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(65);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Expression();
     {if (true) return new TernaryExpr(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayLookup ArrayLookup() throws ParseException {
   NodeList n0 = new NodeList();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   PrimaryExpr n4;
   NodeToken n5;
   Token n6;
    label_18:
    while (true) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(62);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = PrimaryExpr();
        n1.addNode(n4);
      n6 = jj_consume_token(63);
               n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_18;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new ArrayLookup(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StructExpr StructExpr() throws ParseException {
   StructOps n0;
   Identifier n1;
    n0 = StructOps();
    n1 = Identifier();
     {if (true) return new StructExpr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public StructOps StructOps() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 98:
      n2 = jj_consume_token(98);
                n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case 99:
      n4 = jj_consume_token(99);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new StructOps(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PrimaryExpr PrimaryExpr() throws ParseException {
   NodeChoice n0;
   Identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   NodeToken n6;
   Token n7;
   IntegerLiteral n8;
   FloatingLiteral n9;
   StringLiteral n10;
   CharLiteral n11;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n1 = Identifier();
        n0 = new NodeChoice(n1, 0);
      break;
    case 56:
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(56);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Expression();
        n2.addNode(n5);
      n7 = jj_consume_token(57);
               n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
        n0 = new NodeChoice(n2, 1);
      break;
    case INTEGER_LITERAL:
      n8 = IntegerLiteral();
        n0 = new NodeChoice(n8, 2);
      break;
    case FLOATING_POINT_LITERAL:
      n9 = FloatingLiteral();
        n0 = new NodeChoice(n9, 3);
      break;
    case STRING_LITERAL:
      n10 = StringLiteral();
        n0 = new NodeChoice(n10, 4);
      break;
    case CHARACTER_LITERAL:
      n11 = CharLiteral();
        n0 = new NodeChoice(n11, 5);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PrimaryExpr(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public CharLiteral CharLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(CHARACTER_LITERAL);
                            n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new CharLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FloatingLiteral FloatingLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FLOATING_POINT_LITERAL);
                                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FloatingLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StringLiteral StringLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING_LITERAL);
                         n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new StringLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_3R_137()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(56)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(59)) return true;
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(60)) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(56)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(TYPEDEF)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_95()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_111()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_3R_135()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(STRUCT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(60)) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_160() {
    if (jj_scan_token(85)) return true;
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(56)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_scan_token(56)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_scan_token(74)) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_scan_token(78)) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_scan_token(86)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_scan_token(85)) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  static private boolean jj_3R_184() {
    if (jj_scan_token(99)) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_183() {
    if (jj_scan_token(98)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    if (jj_3R_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(56)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(57)) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_36()) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(56)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(59)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_3R_161()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(STRUCT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(56)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_182() {
    if (jj_scan_token(82)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(UNSIGNED)) return true;
    return false;
  }

  static private boolean jj_3R_181() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(SIGNED)) return true;
    return false;
  }

  static private boolean jj_3R_180() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_179() {
    if (jj_scan_token(79)) return true;
    return false;
  }

  static private boolean jj_3R_162() {
    if (jj_scan_token(62)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_36()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_178() {
    if (jj_scan_token(78)) return true;
    return false;
  }

  static private boolean jj_3R_142() {
    Token xsp;
    if (jj_3R_162()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  static private boolean jj_3R_177() {
    if (jj_scan_token(77)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  static private boolean jj_3R_176() {
    if (jj_scan_token(76)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_175() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3R_174() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(56)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(55)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(55)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_173() {
    if (jj_scan_token(74)) return true;
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_34()) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_171() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_170() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_scan_token(70)) return true;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_scan_token(69)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_167() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_scan_token(67)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_165() {
    if (jj_scan_token(66)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_scan_token(96)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_scan_token(94)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_104()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_102()) return true;
    return false;
  }

  static private boolean jj_3R_151() {
    if (jj_scan_token(91)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_150() {
    if (jj_scan_token(90)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_3R_158()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_scan_token(88)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_scan_token(87)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(65)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_164() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(65)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_163() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(65)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_163()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_121()) return true;
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_3R_143()) return true;
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_3R_142()) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_3R_136()) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_3R_141()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_3R_140()) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_3R_139()) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(56)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(57)) return true;
    if (jj_scan_token(59)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_124()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(62)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_157()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_scan_token(56)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[47];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc5800000,0xc5800000,0xc4800000,0xc4800000,0x0,0x0,0x0,0xc4800000,0x0,0x0,0x0,0x0,0x0,0x80000000,0xc4800000,0x0,0x0,0x0,0x44800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xdc9d1000,0x18100000,0xd1000,0xd1000,0x0,0x2000000,0xdc9d1000,0xdc9d1000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0xd1000,0x0,0x0,0x0,0x0,0xd1000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x113661,0x113661,0x113661,0x113661,0x4000000,0x100000,0x100000,0x113661,0x4000000,0x20000000,0x40000000,0x10000,0x20000000,0x0,0x113661,0x8000000,0x100000,0x4000000,0x113661,0x4000000,0x100000,0x11000,0x4000000,0x20000000,0x40000000,0x0,0x2997f667,0x8068006,0x21904000,0x21100000,0x20000,0x100,0x2997f667,0x2997f667,0x100,0x20000000,0x21000000,0x0,0x61000000,0x21000000,0x4000000,0x21100000,0x61000000,0x0,0x40000000,0x0,0x1100000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x784c00,0x0,0x784c00,0x784c00,0x0,0x0,0x784c00,0x784c00,0x0,0x7fffc,0x784c00,0x280000,0xffaffffd,0x784c00,0x0,0x784c00,0xffaffffd,0xff800001,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x0,0x0,0x0,0xf,0x1,0x0,0xc,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[10];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CParser(CParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[100];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 47; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 100; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
